  RUGE currently runs only with * {{{http://sicstus.sics.se/}SICStus Prolog}}, which you must download and install separately.
  
Prolog Only

  If you only want to run the Prolog component of ruge, you can simply download a zip (or tar.gz) file from the downloads section. 
  You then only need to ensure that the {{{http://sicstus.sics.se/sicstus/docs/latest4/html/sicstus.html/mpg_002dref_002dfile_005fsearch_005fpath.html#mpg_002dref_002dfile_005fsearch_005fpath}file_search_path/2}} in your own Prolog code reference your extract directory.
  
Java Only
	
  If you only want to run the Java component ruge, download the jar or (wiser yet) use a dependency management solution such as
  Maven. The required entry (for example to your Maven pom.xml) is described in the <Depencey Information> link on the left.
  
Prolog and Java Through Maven

  Downloading libraries is simple enough but gets unwieldy when you have to upgrade (or downgrade) through multiple versions.
  Maven is widely used in the Java world to solve this problem. As described in the section above, the .jar file of ruge is
  easily available with a pom dependency entry. The ruge Prolog libraries are also available through Maven, but requires a
  few more pom entries. These are somewhat (but typically Maven) verbose but are also fixed and do not need customization -- just copy & paste.
  
  In the \<plugins\> section of your pom, add this:
  
+------------------------------------------+
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.8</version>
				<executions>
					<execution>
						<id>unpack</id>
						<phase>process-sources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.devclear</groupId>
									<artifactId>ruge</artifactId>
									<version>0.0.1-SNAPSHOT</version>
									<outputDirectory>${project.build.directory}</outputDirectory>
									<includes>**/*.pl</includes>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>
+------------------------------------------+ 
  
  When you invoke 'mvn compile' from the command line, a 'prolog-lib/ruge' directory will be creasted in your build directory that contains the ruge Prolog libraries, 
  and which you can reference in your Prolog code. Note that if using Eclipse/m2e, you'll still need to invoke 'mvn compile' from the command line in
  order to have these libraries extracted in this manner, though that only need be done once (but can be done many times withought harm).
  
  There is an Eclipse/m2e bug that may cause a false error under Eclipse, so if using m2e then under \<pluginManagement\> add this:
  
+------------------------------------------+ 
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.8,)
										</versionRange>
										<goals>
											<goal>unpack</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
+------------------------------------------+

   